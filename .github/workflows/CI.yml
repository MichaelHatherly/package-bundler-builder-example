name: CI
on:
  merge_group:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release."
        required: true
        type: string

concurrency:
  # Skip intermediate builds: all builds except for builds on the `master` branch
  # Cancel intermediate builds: only pull request builds
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/main' || github.run_number }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

permissions:
  contents: read

jobs:
  finalize:
    timeout-minutes: 10
    needs: [build, test, release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo build: ${{ needs.build.result }}
          echo test: ${{ needs.test.result }}
          echo release: ${{ needs.release.result }}
      - run: exit 1
        if: |
          (needs.build.result != 'success') ||
          (needs.test.result != 'success') ||
          (needs.release.result != 'success')

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f
        with:
          persist-credentials: false

      - uses: julia-actions/install-juliaup@5e96cfab3bb0500aa42f2843f46c24b91cfcc3cd
        with:
          julia-version: "1.10.2"

      - run: |
            juliaup default 1.10.2

      - run: julia --project=. -e 'import Pkg; Pkg.instantiate()'

      - run: julia --project=. instantiate.jl

      - run: julia --project=. bundle.jl
        env:
          PRIVATE_KEY_BASE64: ${{ secrets.PRIVATE_KEY_BASE64 }}
          PUBLIC_KEY_BASE64: ${{ secrets.PUBLIC_KEY_BASE64 }}
          ARTIFACTS_URL: "https://github.com/MichaelHatherly/package-bundler-builder-example/releases/download/${{ inputs.version }}"

      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
        with:
          name: PackageBundlerExampleRegistry
          path: build/PackageBundlerExampleRegistry

      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
        with:
          name: PackageBundlerExampleRegistryArtifacts
          path: build/PackageBundlerExampleRegistryArtifacts

  test:
    needs: [build]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    env:
      JULIA_PKG_SERVER: "pkg.julialang.org"
      JULIA_DEPOT_PATH: ${{ github.workspace }}/CustomJuliaDepot
      CUSTOM_PACKAGE_BUNDLE: ${{ github.workspace }}/PackageBundlerExampleRegistry
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        version:
          - { julia: "1.10.1", project: "@bundled@v1.0.0" }
          - { julia: "1.10.2", project: "@bundled@v1.1.0" }
    
    steps:

      - uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427
        with:
          name: PackageBundlerExampleRegistry
          path: ${{ env.CUSTOM_PACKAGE_BUNDLE }}

      - uses: julia-actions/setup-julia@f2258781c657ad9b4b88072c5eeaf9ec8c370874
        with:
          version: ${{ matrix.version.julia }}

      # Ensure that the General registry is added, since this is a non-standard depot.
      - run: julia -e 'import Pkg; Pkg.Registry.add(Pkg.Registry.DEFAULT_REGISTRIES)'
      
      - run: ls -R ${JULIA_DEPOT_PATH?:}
        shell: bash

      - run: julia --startup-file=no ${CUSTOM_PACKAGE_BUNDLE?:}/registry/install.jl
        shell: bash

      - run: julia --startup-file=no --project=${{ matrix.version.project }} -e 'import Pkg; Pkg.status(); Pkg.resolve()'

      - run: julia --startup-file=no --project=${{ matrix.version.project }} -e 'import Pkg; Pkg.status(); Pkg.precompile()'

      - run: julia --startup-file=no --project=${{ matrix.version.project }} -e 'import CairoMakie'

      - run: julia --startup-file=no ${JULIA_DEPOT_PATH?:}/registries/PackageBundlerExampleRegistry/remove.jl
        shell: bash

      - run: rm -rf ${JULIA_DEPOT_PATH?:}
        shell: bash
        if: always()

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    env:
      ARTIFACTS_PATH: ${{ github.workspace }}/PackageBundlerExampleRegistryArtifacts

    steps:
      - uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427
        with:
          name: PackageBundlerExampleRegistryArtifacts
          path: ${{ env.ARTIFACTS_PATH }}

      - run: ls -R ${{ env.ARTIFACTS_PATH }}

      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5
        with:
          artifacts: "${{ env.ARTIFACTS_PATH }}/*.tar.gz"
          tag: ${{ inputs.version }}

      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f
        with:
          repository: "MichaelHatherly/package-bundler-provider-example"
          path: "package-bundler-provider-example"
          persist-credentials: false

      - run: ls -R package-bundler-provider-example

      - run: cp ${{ env.ARTIFACTS_PATH }}/Artifacts.toml package-bundler-provider-example/Artifacts.toml

      - run: |
          cd package-bundler-provider-example
          git diff --color=always

      - uses: peter-evans/create-pull-request@9153d834b60caba6d51c9b9510b087acf9f33f83
        if: github.event_name == 'workflow_dispatch'
        with:
          path: "package-bundler-provider-example"
